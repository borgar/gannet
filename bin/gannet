#!/usr/bin/env node

var gannet = require('../lib/gannet');
var ArgumentParser = require('../lib/mod/argparse').ArgumentParser;

var settings = new gannet.Settings();
var use_server = false;
var verbose = false;
var force_write = false;
var debugging = true;

var parser = new ArgumentParser();
parser.add_argument('--settings', {
  'help': "settings file to use",
  'action': function ( value ) {
    // read a settings file
    settings = new gannet.Settings( value );
  }
});
parser.add_argument('--server', {
  'help': "start a test server",
  'action': function ( value ) {
    use_server = true;
  }
});
parser.add_argument('--force', {
  'help': "don't check file dates, just write everything out",
  'action': function ( value ) {
    force_write = true;
  }
});
parser.add_argument('--verbose', {
  'help': "report what is happening to console",
  'action': function ( value ) {
    verbose = true;
  }
});
parser.parse_args();


if ( debugging ) {
  settings.meet_requirements();
  var site = new gannet.Site( settings, verbose, !force_write ).process();
}
else {
  try {
    settings.meet_requirements();
    var site = new gannet.Site( settings, verbose, !force_write ).process();
  }
  catch ( err ) {
    ;;;console.error( 'Error:', err.message );
    use_server = false;
  }
}


// if requested, then start a server
if ( use_server ) {
  new gannet.Server( site, ':8888');
}
